#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'pp'
require 'builder'

%w(base csvreader graph).each {|a| require "framework/components/#{a}"}
include GLI

program_desc 'Framework for generating CC graphs from template'

desc 'Path to the directory with application'
arg_name 'path'
default_value nil
flag [:d,:directory]

desc 'Print project summary'
command :summary do |c|
  c.action do |global_options,options,args|
    GUI.summary
  end
end


desc 'List templates'
command :list_templates do |c|
#  c.desc 'Execute only for one entity.'
#  c.default_value false
#  c.flag [:o, :only]

  c.action do |global_options,options,args|

    graph = Framework::Components::Graph.new("adrian.toman","Test Graph","ZASWWE4646461ASD")
    csvreader = Framework::Components::CSVReader.new("CSVReader1","CSVReader","Test element","zadne")

    xml =  Builder::XmlMarkup.new( :target => $stdout, :indent => 2 )
    xml.instruct! :xml, :version => "1.1", :encoding => "UTF8"

    xml.Graph(graph.get_attributes) {
        xml.Node(csvreader.get_attributes)
     }


    #pp csvreader.get_attributes

  end
end




pre do |global,command,options,args|
  next true if command.nil?
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  pp exception.backtrace
  if exception.is_a?(SystemExit) && exception.status == 0
    false
  else
    pp exception.inspect

    false
  end

  # Error logic here
  # return false to skip default error handling
  # false
  # true
end

exit GLI.run(ARGV)
